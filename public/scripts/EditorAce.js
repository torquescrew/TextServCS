// Generated by CoffeeScript 1.6.3
(function() {
  var editor, fileExtention, fileName, getFileName, getUserDir, myFunction, onNewText, openFile, openFolder, removePath, setFileName, setMode, setUpFileTree, tailAfter, validStr;

  getFileName = function() {
    return $.cookie("fileName");
  };

  setFileName = function(file) {
    return $.cookie("fileName", file);
  };

  validStr = function(string) {
    return string != null;
  };

  tailAfter = function(string, char) {
    var i;
    i = string.lastIndexOf(char);
    if (i > 0) {
      return string.slice(i + 1);
    }
    return "";
  };

  removePath = function(file) {
    return tailAfter(file, "/");
  };

  fileExtention = function(file) {
    return tailAfter(file, ".");
  };

  onNewText = function(instance, change) {
    var text;
    text = instance.getValue();
    return $.post("/_save_file", {
      filename: fileName,
      content: text
    }, function(data) {});
  };

  setMode = function() {
    if (fileExtention(fileName) === "clj") {
      editor.getSession().setMode("ace/mode/clojure");
    } else if (["h", "cpp", "c"].indexOf(fileExtention(fileName)) > 0) {
      editor.getSession().setMode("ace/mode/c_cpp");
    } else if (fileExtention(fileName) === "py") {
      editor.getSession().setMode("ace/mode/python");
    } else if (fileExtention(fileName) === "hs") {
      editor.getSession().setMode("ace/mode/haskell");
    } else {
      if (fileExtention(fileName) === "js") {
        editor.getSession().setMode("ace/mode/javascript");
      }
    }
    return console.log("extension: " + fileExtention(fileName));
  };

  openFile = function(file) {
    var newFile;
    newFile = void 0;
    if ((file != null)) {
      newFile = file;
    } else {
      if (!validStr($.cookie("fileName"))) {
        $.cookie("fileName", getUserDir() + "/src/main/resources/public/Editor.html");
      }
      alert("cookie fileName still not set");
      newFile = $.cookie("fileName");
    }
    return $.getJSON("/_open_file", {
      filename: newFile
    }, function(data) {
      setMode();
      editor.setValue(data.content);
      editor.clearSelection();
      editor.scrollToLine(0);
      return document.title = removePath(fileName);
    });
  };

  openFolder = function(folder) {
    var newFolder;
    newFolder = void 0;
    if (typeof folder !== "undefined" && folder.length > 0) {
      newFolder = folder;
    } else {
      if (typeof $.cookie("folderName") === "undefined" || $.cookie("folderName").length <= 0) {
        $.cookie("folderName", getUserDir());
      }
      newFolder = $.cookie("folderName");
    }
    if (typeof newFolder === "undefined" || newFolder.length <= 0) {
      newFolder = getUserDir();
    }
    return $.getJSON("/_open_folder", {
      folderName: newFolder
    }, function(data) {
      if (data.content) {
        $("#fileTree").html(data.content);
        return setUpFileTree();
      }
    });
  };

  getUserDir = function() {
    var dir;
    dir = "";
    $.getJSON("/_user_dir", {
      folderName: ""
    }, function(data) {
      if (data.content.length > 0) {
        return dir = data.content;
      }
    });
    console.log(dir);
    return dir;
  };

  setUpFileTree = function() {
    var files, folders;
    folders = $(".folder");
    folders.mouseover(function() {
      return $(this).css("color", "#ffffff");
    });
    folders.mouseout(function() {
      return $(this).css("color", "#BBBBBB");
    });
    files = $(".file");
    files.mouseover(function() {
      return $(this).css("color", "#ffffff");
    });
    files.mouseout(function() {
      return $(this).css("color", "#999999");
    });
    $(".folder ul").hide();
    $(".folder").click(function() {
      event.stopPropagation();
      return $(this).children("ul").slideToggle(100);
    });
    $(".file").click(function() {
      event.stopPropagation();
      return openFile($(this).attr("id"));
    });
    return $(".myButton").hover((function() {
      $(this).css("color", "#ffffff");
      return $(this).css("background-color", "#111111");
    }), function() {
      $(this).css("color", "#bbbbbb");
      return $(this).css("background", "none");
    });
  };

  myFunction = function() {
    var folder;
    folder = prompt("Enter folder location:");
    if (folder !== null) {
      return openFolder(folder);
    }
  };

  fileName = "";

  if (location.hash.length > 0 && fileName.length === 0) {
    fileName = location.hash.slice(1);
  }

  editor = ace.edit("editor");

  editor.setTheme("ace/theme/kr_theme");

  openFile();

  openFolder();

}).call(this);
